方法一：构建一个新的数组用来计数
import java.util.*;
public class Solution {
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     * @param numbers int整型一维数组 
     * @return int整型
     */
    public int MoreThanHalfNum_Solution (int[] numbers) {
        // write code here
        int[] arr=new int[100000];
        for(int i=0;i<numbers.length;i++){
            arr[numbers[i]]++;
        }
        int size=numbers.length/2;
        int result=0;
        for(int i=0;i<arr.length;i++){
            if(arr[i]>size){
                result=i;
            }
        }
        return result;
    }
}

方法二：通过HashMap
import java.util.*;


public class Solution {
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     *
     * 
     * @param numbers int整型一维数组 
     * @return int整型
     */
    public int MoreThanHalfNum_Solution (int[] numbers) {
        // write code here
       HashMap<Integer,Integer> mp=new HashMap<>();

       for(int i=0;i<numbers.length;i++){
        if(!mp.containsKey(numbers[i])){
            mp.put(numbers[i],1);
        }
        else{
            mp.put(numbers[i],mp.get(numbers[i])+1);
        }
        if(mp.get(numbers[i])>numbers.length/2){
            return numbers[i];
        }
       }
return 0;
    }
}
