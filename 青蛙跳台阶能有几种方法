方法一递归：
如果只有一阶台阶，只有一种方法
如果有两个及以上台阶，要么从f(n-1)跳一步到f(n)只有一个方法，要么从f(n-2)跳两步到f(n)只有一个方法，形成公式：f(n)=f(n-1)+f(n-2);
import java.util.*;
public class Solution {
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     * @param number int整型 
     * @return int整型
     */
    public int jumpFloor (int number) {
        // write code here
        if(number<=1){
            return 1;
        }
        else{
            return jumpFloor(number-1)+jumpFloor(number-2);
        }
    }
}

方法二：动态规划：动态规划算法的基本思想是：将待求解的问题分解成若干个相互联系的子问题，先求解子问题，
然后从这些子问题的解得到原问题的解；对于重复出现的子问题，只在第一次遇到的时候对它进行求解，并把答案保存起来，让以后再次遇到时直接引用答案，不必重新求解。动态规划算法将问题的解决方案视为一系列决策的结果。
既然与斐波那契数列相同，我们就把它放入数组中来解决。
import java.util.*;
public class Solution {
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     * @param number int整型 
     * @return int整型
     */
    public int jumpFloor (int number) {
        // write code here
        if(number<=1){
            return 1;
        }

        int[] arr=new int[number+1];
        arr[0]=1;
        arr[1]=1;
        for(int i=2;i<=number;i++){
            arr[i]=arr[i-1]+arr[i-2];
        }
        return arr[number];
       }
     }

