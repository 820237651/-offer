import java.util.*;

/*
 * public class TreeNode {
 *   int val = 0;
 *   TreeNode left = null;
 *   TreeNode right = null;
 *   public TreeNode(int val) {
 *     this.val = val;
 *   }
 * }
 */

public class Solution {
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     *
     * 
     * @param root TreeNode类 
     * @param p int整型 
     * @param q int整型 
     * @return int整型
     */

    public ArrayList<Integer> path(TreeNode root,int target){
        TreeNode node=root;
        ArrayList<Integer>list=new ArrayList<Integer>();
        while(node.val!=target){
            list.add(node.val);
            if(node.val<target){
                node=node.right;
            }
            else{
                node=node.left;
            }
        }
        list.add(node.val);
        return list;
    }



    public int lowestCommonAncestor (TreeNode root, int p, int q) {
        // write code here

    ArrayList<Integer> p_path=path(root,p);
    ArrayList<Integer> q_path=path(root,q);

    int result=0;
    for(int i=0;i<p_path.size()&&i<q_path.size();i++){
            if(p_path.get(i).equals(q_path.get(i))){//注意用equals比较
                result=p_path.get(i);
            }
            else{
                break;
            }
    }
    return result;
    }
}
