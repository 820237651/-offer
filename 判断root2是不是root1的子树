import java.util.*;//用两个队列
/**
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/


public class Solution {

    public boolean has(TreeNode root1,TreeNode root2){
         Queue<TreeNode> q1=new LinkedList<>();
         Queue<TreeNode> q2=new LinkedList<>();

         q1.offer(root1);
         q2.offer(root2);

         while(!q2.isEmpty()){
            TreeNode node1=q1.poll();
            TreeNode node2=q2.poll();
            if(node1==null||node1.val!=node2.val){//如果第一棵树已经遍历完或者数值不相等
                return false;
            }
            if(node2.left!=null){
                q1.offer(node1.left);
                q2.offer(node2.left);
            }
            if(node2.right!=null){
                q1.offer(node1.right);
                q2.offer(node2.right);
            }
        }
        return true;

    }

    public boolean HasSubtree(TreeNode root1,TreeNode root2) {
        if(root1==null||root2==null){
            return false;
        }
        Queue<TreeNode> q=new LinkedList<>();
        q.offer(root1);
        while(!q.isEmpty()){
            TreeNode node=q.poll();
            if(node.val==root2.val){
                if(has(node,root2)){
                    return true;
                }
            }
            if(node.left!=null){
                q.offer(node.left);
            }
            if(node.right!=null){
                q.offer(node.right);
            }
        }
        return false;
    }
}
